#include "monty.h"

int data;

int main(int argc, char *argv[]) {
	if (argc != 2) {
		printf("Usage: monty file\n");
		exit(EXIT_FAILURE);
	}

	processFile(argv[1]);

	return 0;
}

void processFile(char *filename) {
	char buffer[50];
	int line_number;
	stack_t *stack = NULL;

	FILE *file = fopen(filename, "r");
	if (file == NULL) {
		printf("Failed to open the file.\n");
		exit(EXIT_FAILURE);
	}

	instruction_t instructions[] = {
		{"push", push_function},
		{"pop", pop_function},
		{"add", add_function},
		{"pall", pall},
	};

	line_number = 0;
	while (fgets(buffer, sizeof(buffer), file) != NULL) {
		char opcode[10] = "";
		char data_part[5] = "";
		int opcodeValid = 0;

		parseBuffer(buffer, opcode, data_part);
		line_number++;
		opcodeValid = processOpcode(&stack, instructions, opcode, data_part, line_number);

		if (opcodeValid == 0)
			printf("%s not found \n", opcode);
	}

	fclose(file);
}

void parseBuffer(char *buffer, char *opcode, char *data_part) {
	if (!isOpcodeOnly(buffer)) {
		strcpy(opcode, buffer);
		size_t len = strlen(opcode);
		if (len > 0 && opcode[len - 1] == '\n')
			opcode[len - 1] = '\0';
	} else {
		char *token = strtok(buffer, " ");
		if (token != NULL)
			strcpy(opcode, token);
		token = strtok(NULL, " ");
		if (token != NULL)
			strcpy(data_part, token);
	}
}

int processOpcode(stack_t **stack, instruction_t *instructions, char *opcode, char *data_part, int line_number) {
	int i;
	for (i = 0; i < sizeof(instructions) / sizeof(instructions[0]); i++) {
		if (strcmp(opcode, instructions[i].opcode) == 0) {
			if (strcmp(opcode, "push") == 0 && strcmp(data_part, "") == 0) {
				printf("L<%d>: usage: push integer\n", line_number);
				exit(EXIT_FAILURE);
			}
			data = atoi(data_part);
			instructions[i].f(stack, line_number);
			return 1;
		}
	}
	return 0;
}
